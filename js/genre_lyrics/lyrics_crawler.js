// Generated by CoffeeScript 1.12.6
(function() {
  var GenreLyricsCrawler;

  this.LyricsCrawler = (function() {
    function LyricsCrawler(parentContext1, callbackFunction1, artistsData1) {
      var genre, i, index, lastStartedGenre, len, ref;
      this.parentContext = parentContext1;
      this.callbackFunction = callbackFunction1;
      this.artistsData = artistsData1;
      console.log("LyricsCrawler created");
      console.log("@artistsData = ", this.artistsData);
      this.sentLyricsToServer = false;
      this.writeGenreProgress = false;
      this.genres = Object.keys(this.artistsData);
      lastStartedGenre = AppData.getLastGenre();
      console.log("/// lastStartedGenre = ", lastStartedGenre);
      ref = this.genres;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        genre = ref[index];
        if (genre === lastStartedGenre) {
          this.currentGenreIndex = index;
        }
      }
      console.log("/// @currentGenreIndex = ", this.currentGenreIndex);
      this.currentGenre = this.genres[this.currentGenreIndex];
      console.log("/// @currentGenre = ", this.currentGenre);
      this.lastGenreIndex = this.genres.length - 1;
      this._crawlCurrentGenreArtists();
    }

    LyricsCrawler.prototype._crawlCurrentGenreArtists = function() {
      if (this.writeGenreProgress) {
        console.log("*&&& @writeGenreProgress TRUE");
        return this._writeGenreProgress(this.currentGenre);
      } else {
        console.log("&&& @writeGenreProgress FALSE");
        this._startCrawl();
        return this.writeGenreProgress = true;
      }
    };

    LyricsCrawler.prototype._getNextGenre = function() {
      console.log("^^^ _getNextGenre");
      return this.genres[++this.currentGenreIndex];
    };

    LyricsCrawler.prototype.allGenreArtistsCrawled = function(genre) {
      console.log("*** All artists crawled for genre: ", genre);
      if (this.currentGenreIndex === this.lastGenreIndex) {
        console.log("=== Last genre, finished");
        return this.callbackFunction.call(this.parentContext);
      } else {
        this.currentGenre = this._getNextGenre();
        console.log("--- Not last genre, crawl next: ", this.currentGenre);
        return this._crawlCurrentGenreArtists();
      }
    };

    LyricsCrawler.prototype._writeGenreProgress = function(genre) {
      var data, progressWriterUrl;
      console.log("--- _writeGenreProgress for genre " + genre);
      progressWriterUrl = AppData.getProgressWriterUrl();
      data = {
        genre: genre
      };
      return AjaxUtils.sendAjax("POST", progressWriterUrl, this, this._progressWritten, this._progressWritingError, data, genre);
    };

    LyricsCrawler.prototype._progressWritten = function(data, onTheFlyData) {
      console.log("--- progress written for genre " + this.currentGenre);
      AppData.setLastArtist("");
      return this._startCrawl();
    };

    LyricsCrawler.prototype._progressWritingError = function(errorCode, errorMessage) {
      console.log("Error while writing progress");
      console.log(errorMessage);
      return console.log(errorCode);
    };

    LyricsCrawler.prototype._startCrawl = function() {
      var artists, genreLyricsCrawler;
      artists = this.artistsData[this.currentGenre];
      genreLyricsCrawler = new GenreLyricsCrawler(this, this.currentGenre, artists);
      return genreLyricsCrawler.crawl();
    };

    LyricsCrawler.crawl = function(parentContext, callbackFunction, artistsData) {
      console.log("Crawl lyrics: ", artistsData);
      return this.lyricsCrawler = new LyricsCrawler(parentContext, callbackFunction, artistsData);
    };

    return LyricsCrawler;

  })();

  GenreLyricsCrawler = (function() {
    var LYRICS_SEPARATOR;

    LYRICS_SEPARATOR = "|$%:%$|";

    function GenreLyricsCrawler(parentContext1, genre1, artists1) {
      var artist, i, index, lastStartedArtist, len, ref;
      this.parentContext = parentContext1;
      this.genre = genre1;
      this.artists = artists1;
      console.log("$ $ $ @artists: ", this.artists);
      lastStartedArtist = AppData.getLastArtist();
      console.log("$ $ $ lastStartedArtist = ", lastStartedArtist);
      if (!AppUtils.isEmptyData(lastStartedArtist)) {
        ref = this.artists;
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          artist = ref[index];
          if (artist.artistName === lastStartedArtist) {
            this.currentArtistIndex = index;
            break;
          }
        }
      } else {
        this.currentArtistIndex = 0;
      }
      this.currentArtist = this.artists[this.currentArtistIndex];
      console.log("$ $ $ @currentArtistIndex = ", this.currentArtistIndex);
      console.log("$ $ $ @currentArtist = ", this.currentArtist);
      this.lastArtistIndex = this.artists.length - 1;
      this.genreLyrics = [];
    }

    GenreLyricsCrawler.prototype.crawl = function() {
      console.log("Crawl artist lyrics for genre: " + this.genre);
      console.log("Artists: ", this.artists);
      return this._crawlCurrentArtist();
    };

    GenreLyricsCrawler.prototype._crawlCurrentArtist = function() {
      console.log("Crawl lyrics for artist: ", this.currentArtist);
      this.singleArtistLyricsCrawler = new SingleArtistLyricsCrawler(this.currentArtist, this, this.artistLyricsCrawlingDone);
      return this.singleArtistLyricsCrawler.crawl();
    };

    GenreLyricsCrawler.prototype.artistLyricsCrawlingDone = function(artist, genre, lyrics) {
      var context, timeout;
      console.log("Done crawling lyrics for artist " + artist + " with genre " + genre + ", lyrics count = ", lyrics === null ? "none" : lyrics.length);
      if (!AppUtils.isEmptyData(lyrics)) {
        console.log("[O] Lyrics not empty -> send to server");
        this._sendLyricsToServer(artist, genre, lyrics);
      } else {
        console.log("[X] Lyrics empty -> skip");
      }
      if (this.sentLyricsToServer && AppData.isDebugMode()) {
        console.log("[XXX] DEBUG MODE, DONE WITH THIS GENRE");
        this.parentContext.allGenreArtistsCrawled(this.genre, this.genreLyrics);
        return;
      }
      if (this.currentArtistIndex === this.lastArtistIndex) {
        return this.parentContext.allGenreArtistsCrawled(this.genre);
      } else {
        this.currentArtist = this._getNextArtist();
        timeout = AppData.getRequestTimeot();
        context = this;
        return setTimeout(function() {
          return context._crawlCurrentArtist();
        }, timeout);
      }
    };

    GenreLyricsCrawler.prototype._getNextArtist = function() {
      return this.artists[++this.currentArtistIndex];
    };

    GenreLyricsCrawler.prototype._sendLyricsToServer = function(artistName, artistGenre, lyrics) {
      var content, data, phpUrl;
      console.log("Send lyrics to server for artist " + artistName + " with genre " + artistGenre + ", lyrics length = ", lyrics.length);
      content = this._transformLyricsForServer(lyrics);
      content = JSON.stringify(content);
      phpUrl = AppData.getLyricsWriterUrl();
      data = {
        genre: this.genre,
        content: content,
        artistName: artistName,
        artistGenre: artistGenre,
        createNewFile: false
      };
      this.sentLyricsToServer = true;
      return AjaxUtils.sendAjax('POST', phpUrl, this, this._sendToServerSuccess, this._sendToServerError, data, null);
    };

    GenreLyricsCrawler.prototype._sendToServerSuccess = function(data, onTheFlyData) {
      return console.log("[->] Lyrics sent to server");
    };

    GenreLyricsCrawler.prototype._sendToServerError = function(xhr, status) {
      console.log("Error while sending lyrics to server");
      console.log(xhr);
      return console.log(status);
    };

    GenreLyricsCrawler.prototype._transformLyricsForServer = function(lyricsArray) {
      var i, len, lyrics, prependSeparator, transformed;
      if (AppUtils.isEmptyData(lyricsArray)) {
        return "";
      }
      prependSeparator = false;
      transformed = "";
      for (i = 0, len = lyricsArray.length; i < len; i++) {
        lyrics = lyricsArray[i];
        if (prependSeparator) {
          transformed += LYRICS_SEPARATOR;
        }
        transformed += lyrics;
        prependSeparator = true;
      }
      return transformed;
    };

    return GenreLyricsCrawler;

  })();

}).call(this);
