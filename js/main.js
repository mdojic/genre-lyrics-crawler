// Generated by CoffeeScript 1.12.6
(function() {
  this.Main = (function() {
    var CRAWL_GENRES;

    CRAWL_GENRES = false;

    function Main() {
      var turnOffLogging;
      turnOffLogging = !AppData.isLoggingOn();
      if (turnOffLogging) {
        console.log("App isn't in debug mode, turn off logging");
        console.log = function() {};
      } else {
        console.log("App is in debug mode, logging on");
      }
      this.genreData = null;
      this.filteredGenreData = null;
      this._loadProgress();
    }

    Main.prototype._loadProgress = function() {
      var progressReaderUrl;
      progressReaderUrl = AppData.getProgressReaderUrl();
      return AjaxUtils.sendAjax('GET', progressReaderUrl, this, this._progressLoaded, this._progressLoadingError, null);
    };

    Main.prototype._progressLoaded = function(data, onTheFlyData) {
      var lastArtist, lastGenre, progress;
      console.log("/// /// _progressLoaded: ", data);
      progress = JSON.parse(data);
      lastGenre = progress.genre;
      lastArtist = progress.artist;
      AppData.setLastGenre(lastGenre);
      AppData.setLastArtist(lastArtist);
      return this._startWork();
    };

    Main.prototype._progressLoadingError = function() {
      return console.log("Error while loading progress");
    };

    Main.prototype._startWork = function() {
      if (CRAWL_GENRES) {
        console.log("Crawl genres");
        return this._crawlGenreArtists();
      } else {
        console.log("Skip crawling genres");
        return this._readGenreArtists();
      }
    };

    Main.prototype._crawlGenreArtists = function() {
      return GenreArtistsCrawler.crawl(this, this.allGenresCrawled);
    };

    Main.prototype.allGenresCrawled = function() {
      return this._readGenreArtists();
    };

    Main.prototype._readGenreArtists = function() {
      var filterArtists, readAllArtists;
      console.log("||| _readGenreArtists |||");
      filterArtists = AppData.doFilterArtists();
      console.log("||| filterArtists = ", filterArtists);
      readAllArtists = filterArtists;
      console.log("||| readAllArtists = ", readAllArtists);
      return GenreArtistsReader.read(this, this.allGenresRead, readAllArtists);
    };

    Main.prototype.allGenresRead = function(data) {
      var dataForServer, filterArtists, filteredData, genre, ref, singleGenreData;
      console.log("@@@ @@@ @@@ @@@ @@@ allGenresRead @@@ @@@ @@@ @@@ @@@");
      this.genreData = data;
      this.filteredGenreData = {};
      filterArtists = AppData.doFilterArtists();
      if (filterArtists) {
        dataForServer = [];
        ref = this.genreData;
        for (genre in ref) {
          singleGenreData = ref[genre];
          filteredData = GenreProcessingUtils.filterGenreArtists(singleGenreData, genre);
          this.filteredGenreData[genre] = filteredData;
        }
      } else {
        this.filteredGenreData = this.genreData;
      }
      console.log("*** Filtered genre data: ");
      console.log(this.filteredGenreData);
      return this._crawlLyrics();
    };

    Main.prototype._crawlLyrics = function() {
      console.log("Crawl lyrics, @filteredGenreData = ", this.filteredGenreData);
      return LyricsCrawler.crawl(this, this.allLyricsCrawled, this.filteredGenreData);
    };

    Main.prototype.allLyricsCrawled = function(lyricsData) {
      console.log("--------------------------------------------------------------------");
      console.log("\t\t All lyrics crawled  ");
      return console.log("--------------------------------------------------------------------");
    };

    return Main;

  })();

  $(function() {
    var main;
    console.log("@Main loaded");
    return main = new Main();
  });

}).call(this);
